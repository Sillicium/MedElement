# Generated by Django 5.0.6 on 2024-06-24 12:58

import django.contrib.postgres.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CreatePatientModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_code', models.BigIntegerField(blank=True, help_text='Уникальный код клиники (учитывается, если есть глобальный доступ к API)', null=True)),
                ('name', models.CharField(help_text='Имя', max_length=255)),
                ('lastname', models.CharField(help_text='Фамилия', max_length=255)),
                ('middlename', models.CharField(help_text='Отчество', max_length=255)),
                ('patient_email', models.EmailField(help_text='Электронная почта', max_length=254)),
                ('birthday', models.CharField(help_text='Дата рождения (дд.мм.гггг)', max_length=10)),
                ('gender', models.IntegerField(choices=[(1, 'Female'), (2, 'Male')], help_text='Пол (1 - женский; 2 - мужской)')),
                ('patient_phone_country_code', models.CharField(help_text='Код страны', max_length=10)),
                ('patient_phone_city_code', models.CharField(help_text='Код города', max_length=10)),
                ('patient_phone_number', models.CharField(help_text='Номер', max_length=20)),
                ('iin', models.CharField(help_text='ИИН', max_length=12)),
                ('source_code', models.BigIntegerField(blank=True, help_text='Источник информации о клинике', null=True)),
            ],
            options={
                'verbose_name': 'Пациент',
                'verbose_name_plural': 'Пациенты',
            },
        ),
        migrations.CreateModel(
            name='CreatePatientResponseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_code', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(), help_text='Уникальные коды пациентов', size=None)),
                ('email', django.contrib.postgres.fields.ArrayField(base_field=models.EmailField(max_length=254), help_text='Список адресов электронной почты', size=None)),
                ('iin', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=12), help_text='Список ИИН-ов', size=None)),
                ('name', models.CharField(help_text='Имя', max_length=255)),
                ('lastname', models.CharField(help_text='Фамилия', max_length=255)),
                ('middlename', models.CharField(help_text='Отчество', max_length=255)),
                ('gender', models.IntegerField(choices=[(1, 'Female'), (2, 'Male')], help_text='Пол (1 - женский, 2 - мужской)')),
                ('birthday', models.CharField(help_text='Дата рождения (дд.мм.гггг)', max_length=10)),
                ('patient_phone_country_code', models.IntegerField(help_text='Код страны (7 или 998)')),
                ('patient_phone_city_code', models.IntegerField(help_text='Код города (777)')),
                ('patient_phone_number', models.IntegerField(help_text='Номер (1231212)')),
                ('skip', models.IntegerField(help_text='Какое количество записей пропустить')),
            ],
            options={
                'verbose_name': 'Пациент',
                'verbose_name_plural': 'Пациенты',
            },
        ),
        migrations.CreateModel(
            name='SearchPatientModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_code', models.JSONField(help_text='Уникальные коды пациентов')),
                ('email', models.JSONField(help_text='Список адресов электронной почты')),
                ('iin', models.JSONField(help_text='Список ИИН-ов')),
                ('name', models.CharField(help_text='Имя', max_length=255)),
                ('lastname', models.CharField(help_text='Фамилия', max_length=255)),
                ('middlename', models.CharField(help_text='Отчество', max_length=255)),
                ('gender', models.IntegerField(choices=[(1, 'Female'), (2, 'Male')], help_text='Пол (1 - женский, 2 - мужской)')),
                ('birthday', models.CharField(help_text='Дата рождения (дд.мм.гггг)', max_length=10)),
                ('patient_phone_country_code', models.IntegerField(help_text='Код страны (7 или 998)')),
                ('patient_phone_city_code', models.IntegerField(help_text='Код города (777)')),
                ('patient_phone_number', models.IntegerField(help_text='Номер (1231212)')),
                ('skip', models.IntegerField(help_text='Какое количество записей пропустить')),
            ],
            options={
                'verbose_name': 'Поиск пациента',
                'verbose_name_plural': 'Поиск пациентов',
            },
        ),
        migrations.CreateModel(
            name='SearchPatientResponseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_code', models.CharField(help_text='Уникальный код профиля', max_length=255, unique=True)),
                ('parent_code', models.CharField(help_text='Код родителя', max_length=255)),
                ('name', models.CharField(help_text='Имя', max_length=255)),
                ('lastname', models.CharField(help_text='Фамилия', max_length=255)),
                ('middlename', models.CharField(help_text='Отчество', max_length=255)),
                ('fullname', models.CharField(help_text='Полное имя', max_length=255)),
                ('birthday', models.CharField(help_text='Дата рождения (дд.мм.гггг)', max_length=10)),
                ('gender', models.IntegerField(choices=[(1, 'Female'), (2, 'Male')], help_text='Пол (1 - женский, 2 - мужской)')),
                ('iin', models.CharField(help_text='ИИН', max_length=12)),
                ('ambulatory_count', models.CharField(help_text='Количество амбулаторных посещений', max_length=255)),
                ('created_date', models.DateTimeField(help_text='Дата создания')),
                ('removed', models.BooleanField(default=False, help_text='Удален ли профиль')),
                ('removed_date', models.DateTimeField(blank=True, help_text='Дата удаления', null=True)),
                ('removed_reason', models.TextField(blank=True, help_text='Причина удаления', null=True)),
                ('description', models.TextField(blank=True, help_text='Описание', null=True)),
                ('status_code', models.CharField(blank=True, help_text='Код статуса', max_length=255, null=True)),
                ('percentage_discount', models.FloatField(default=0, help_text='Процент скидки')),
                ('patient_passport', models.TextField(blank=True, help_text='Паспорт пациента', null=True)),
                ('patient_phone_1', models.CharField(blank=True, help_text='Телефон пациента 1', max_length=20, null=True)),
                ('patient_phone_2', models.CharField(blank=True, help_text='Телефон пациента 2', max_length=20, null=True)),
                ('patient_phone_3', models.CharField(blank=True, help_text='Телефон пациента 3', max_length=20, null=True)),
                ('patient_phone_4', models.CharField(blank=True, help_text='Телефон пациента 4', max_length=20, null=True)),
                ('phones_str', models.TextField(blank=True, help_text='Строка с телефонами', null=True)),
                ('patient_address', models.TextField(blank=True, help_text='Адрес пациента', null=True)),
                ('patient_email', models.EmailField(blank=True, help_text='Электронная почта пациента', max_length=254, null=True)),
                ('patient_card_number', models.CharField(blank=True, help_text='Номер карты пациента', max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Профиль',
                'verbose_name_plural': 'Профили',
            },
        ),
    ]
